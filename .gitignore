
-- SG
-- Services
local InputService = game:GetService("UserInputService")
local Players = game:GetService("Players")

-- Client
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()

-- Library & Input
local Input = {}
Input.Keys  = {}
Input.Mouse = {}
Input.Scope = {}

local KeyEvents   = {}
local MouseEvents = {}

-- Utility functions
local function CreateEvent()
	local this = {}
	local connections = {}
	local event = Instance.new("BindableEvent")
	
	function this:connect(func)
		local scope = {}
		local signal = event.Event:connect(function(callback)
			callback(scope, func)
		end)
		connections[signal] = true
		local new = {}
		function new:disconnect()
			scope = nil
			connections[signal] = nil
			signal:disconnect()
		end
		return new
	end
	
	function this:disconnect()
		for i,v in next, connections do
			i:disconnect()
			connections[i] = nil
		end
	end
	
	function this:wait()
		return event.Event:wait()
	end
	
	-- Bypasses object cloning
	function this:Fire(...)
		local args = {...}
		event:Fire(function(scope, main)
			main(scope, unpack(args))
		end)
	end
	
	return this
end

-- Create key input events
local function CreateKeyEvent()
	return {
		KeyUp   = CreateEvent(),
		KeyDown = CreateEvent()
	}
end

local function ValidKeyEvent(v)
	local KeyCode = Enum.KeyCode[v]
	local KeyValue = KeyCode.Value
	local Key = KeyEvents[KeyValue]
	if not Key then
		KeyEvents[KeyValue] = CreateKeyEvent()
		Key = KeyEvents[KeyValue]
	end
	return Key
end

local function ValidMouseEvent(v)
	local IsEvent = pcall(function()
		local _ = Mouse[v].connect
	end)
	if IsEvent then
		local Stored = MouseEvents[v]
		if not Stored then
			MouseEvents[v] = CreateEvent()
			Stored = MouseEvents[v]
			Mouse[v]:connect(function(...)
				Stored:Fire(Input.Scope, ...)
			end)
		end
		return Stored
	end
end

-- Convert text to KeyCode values
setmetatable(Input.Keys, {
	__index = function(t,k)
		if type(k) == "string" then
			return ValidKeyEvent(k)
		end
	end,
})

setmetatable(Input.Mouse, {
	__index = function(t,k)
		if type(k) == "string" then
			return ValidMouseEvent(k)
		end
	end
})

-----------------------
-- Library interface --
-----------------------

-- Create a new event signal
function Input:CreateEvent()
	return CreateEvent()
end

-- Return the UIS
function Input:GetService()
	return InputService
end

-- Return the player mouse
function Input:GetMouse()
	return Mouse
end

-- Input began listener
InputService.InputBegan:connect(function(InputObject)
	local KeyCode   = InputObject.KeyCode
	local KeyInput  = KeyEvents[KeyCode.Value]
	
	if KeyInput then
		KeyInput.KeyDown:Fire(Input.Scope)
	end
end)

-- Input ended listener
InputService.InputEnded:connect(function(InputObject)
	local KeyCode   = InputObject.KeyCode
	local KeyInput  = KeyEvents[KeyCode.Value]
	
	if KeyInput then
		KeyInput.KeyUp:Fire(Input.Scope)
	end
end)

-- Lock the library
local function Lock(t)
	local proxy = setmetatable({},{
		__index = function(_,k)
			if type(t[k]) == "table" then
				return Lock(t[k])
			else
				return t[k]
			end
		end,
		__newindex = function()
			warn("Cannot change a protected table")
		end,
		__metatable = "Metatable is locked"
	})
	return proxy
end

-- Return 
return Lock(Input)
